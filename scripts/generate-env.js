#!/usr/bin/env node

/**
 * Generate environment.ts files from .env file
 * This script reads the .env file and creates the environment configuration
 * Run this before building or serving the app: node scripts/generate-env.js
 */

const fs = require('fs');
const path = require('path');

// Read .env file
const envPath = path.join(__dirname, '..', '.env');
const envConfig = {};

if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf-8');

  envContent.split('\n').forEach(line => {
    line = line.trim();

    // Skip comments and empty lines
    if (!line || line.startsWith('#')) {
      return;
    }

    // Parse KEY=VALUE
    const match = line.match(/^([^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      let value = match[2].trim();

      // Remove quotes if present
      value = value.replace(/^["']|["']$/g, '');

      envConfig[key] = value;
    }
  });

  console.log('‚úÖ Loaded .env file');
  console.log(`üìã Trading Mode: ${envConfig.TRADING_MODE || 'demo'}`);
} else {
  console.log('‚ö†Ô∏è  No .env file found, using default demo mode');
}

// Generate environment.ts content
const tradingMode = envConfig.TRADING_MODE || 'demo';
const binanceApiKey = envConfig.BINANCE_API_KEY || '';
const binanceApiSecret = envConfig.BINANCE_API_SECRET || '';
const testnetApiKey = envConfig.BINANCE_TESTNET_API_KEY || '';
const testnetApiSecret = envConfig.BINANCE_TESTNET_API_SECRET || '';
const useProxy = envConfig.USE_PROXY === 'true' || envConfig.USE_PROXY === '1';
const proxyUrl = envConfig.PROXY_URL || 'http://localhost:3000';

const environmentContent = `// This file is auto-generated by scripts/generate-env.js
// DO NOT EDIT MANUALLY - Edit .env file instead and run: npm run generate-env

export interface EnvironmentConfig {
  production: boolean;
  tradingMode: 'demo' | 'testnet' | 'live';
  useProxy: boolean;
  proxyUrl: string;
  binance: {
    apiKey: string;
    apiSecret: string;
    apiUrl: string;
    wsUrl: string;
  };
  testnet: {
    apiKey: string;
    apiSecret: string;
    apiUrl: string;
    wsUrl: string;
  };
  settings: {
    autoRefreshInterval: number;
    chartUpdateInterval: number;
  };
}

export const environment: EnvironmentConfig = {
  production: false,
  tradingMode: '${tradingMode}',
  useProxy: ${useProxy},
  proxyUrl: '${proxyUrl}',
  binance: {
    apiKey: '${binanceApiKey}',
    apiSecret: '${binanceApiSecret}',
    apiUrl: 'https://api.binance.com',
    wsUrl: 'wss://stream.binance.com:9443/ws'
  },
  testnet: {
    apiKey: '${testnetApiKey}',
    apiSecret: '${testnetApiSecret}',
    apiUrl: 'https://testnet.binance.vision',
    wsUrl: 'wss://testnet.binance.vision/ws'
  },
  settings: {
    autoRefreshInterval: 10000,
    chartUpdateInterval: 1000
  }
};
`;

// Write to src/environments/environment.ts
const envDir = path.join(__dirname, '..', 'src', 'environments');
if (!fs.existsSync(envDir)) {
  fs.mkdirSync(envDir, { recursive: true });
}

const envFilePath = path.join(envDir, 'environment.ts');
fs.writeFileSync(envFilePath, environmentContent);

console.log('‚úÖ Generated src/environments/environment.ts');

// Also generate environment.prod.ts (same content but with production: true)
const prodEnvironmentContent = environmentContent.replace(
  'production: false,',
  'production: true,'
);

const prodEnvFilePath = path.join(envDir, 'environment.prod.ts');
fs.writeFileSync(prodEnvFilePath, prodEnvironmentContent);

console.log('‚úÖ Generated src/environments/environment.prod.ts');
console.log('');
console.log('üéØ Next step: Run "ng serve" to start the application');
console.log('');

if (tradingMode === 'demo') {
  console.log('‚ÑπÔ∏è  Running in DEMO mode - Edit .env file to change mode');
} else if (tradingMode === 'testnet') {
  console.log('üß™ Running in TESTNET mode');
  if (!testnetApiKey || !testnetApiSecret) {
    console.warn('‚ö†Ô∏è  WARNING: Testnet API keys are missing in .env file!');
  }
} else if (tradingMode === 'live') {
  console.log('üí∞ Running in LIVE mode');
  if (!binanceApiKey || !binanceApiSecret) {
    console.warn('‚ö†Ô∏è  WARNING: Live API keys are missing in .env file!');
  }
}
